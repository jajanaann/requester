local CoastingLibrary = getgenv().Lib
if not Lib then return end

local player = game:GetService("Players").LocalPlayer
local startTime = tick()
local FWH = "https://discord.com/api/webhooks/1349733447996014633/0aKcKpA7zxRXgiQeNIw8IJt-VVhjFD2ZtdxNeZN4ehoBAOiq-KV0kcrx6PWCZeAp8DxD"
local BWH = "https://discord.com/api/webhooks/1349733452433461391/EJf9TDmqiH9GoK4yH6O2g6sjMSEM8-uKXDu73eI4RpHaKF6QVuISS6_W9n_3GV2auopP"
local RWH = "https://discord.com/api/webhooks/1349733447060553768/oey4ypwJOX8VwzaBz2F6-7wO_5dIY7UIqEsCiCh9breZKo8DYb4NOh1k-lH7fjJaRPXF"
local CD = 300
local LSF = 0
local LSB = 0
local LSR = 0
local SR = 5

local GN = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local GU = "https://www.roblox.com/games/" .. game.PlaceId

local MT = CoastingLibrary:CreateTab("Reporter")
local IS = MT:CreateSection("Player Info")

local PIT = string.format(
    "Time Played: 0 seconds\nUsername: %s\nDisplay Name: %s\nPlayer ID: %d\nExecutor: %s\nJoin Date: %s\nMembership: %s",
    player.Name,
    player.DisplayName,
    player.UserId,
    (identifyexecutor and identifyexecutor() or "Unknown"),
    os.date("%Y-%m-%d", player.AccountAge * 86400 + os.time() - player.AccountAge * 86400),
    player.MembershipType == Enum.MembershipType.Premium and "Premium" or "None"
)
local PIL = IS:CreateLabel("Player Info", PIT)

spawn(function()
    while true do
        wait(1)
        local elapsed = tick() - startTime
        local updatedText = string.format(
            "Time Played: %d seconds (%.2f minutes)\nUsername: %s\nDisplay Name: %s\nPlayer ID: %d\nExecutor: %s\nJoin Date: %s\nMembership: %s",
            elapsed, elapsed / 60,
            player.Name,
            player.DisplayName,
            player.UserId,
            (identifyexecutor and identifyexecutor() or "Unknown"),
            os.date("%Y-%m-%d", player.AccountAge * 86400 + os.time() - player.AccountAge * 86400),
            player.MembershipType == Enum.MembershipType.Premium and "Premium" or "None"
        )
        PIL.ChangeText(updatedText)
    end
end)

local RS = MT:CreateSection("Requests, Reports & Reviews")
local CL = RS:CreateLabel("Cooldown", "")

function SendEmbed(wh, embed)
    local http = game:GetService("HttpService")
    local headers = { ["Content-Type"] = "application/json" }
    local data = { ["embeds"] = { embed } }
    local body = http:JSONEncode(data)
    pcall(function()
        request({
            Url = wh,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
end

function UpdateCD(label, lastSent)
    spawn(function()
        while tick() - lastSent < CD do
            local timeLeft = CD - (tick() - lastSent)
            label.ChangeText("Cooldown: " .. math.ceil(timeLeft) .. "s")
            wait(1)
        end
        label.ChangeText("")
    end)
end

local FRF, FR = RS:CreateTextBox("Request a Feature", 100000, "Describe your feature request here...", nil)
RS:CreateButton("Send Feature Request", function()
    if tick() - LSF < CD then
        Lib:CreateNotification("Cooldown Active", "Please wait before sending another request!", 3, {"OK"})
        return
    end
    LSF = tick()
    UpdateCD(CL, LSF)

    local FT = FR.Text or ""
    local desc = string.format(
        "**Feature Request:** %s\n**Player:** %s\n**Game:** [%s](%s)",
        FT ~= "" and FT or "No description provided",
        player.Name,
        GN,
        GU
    )

    local embed = {
        ["title"] = "New Feature Request",
        ["description"] = desc,
        ["color"] = 65280
    }
    SendEmbed(FWH, embed)
    Lib:CreateNotification("Sent", "Your feature request has been sent!", 3, {"OK"})
end)

local BRF, BR = RS:CreateTextBox("Report a Bug", 100000, "Describe the bug here...", nil)
RS:CreateButton("Send Bug Report", function()
    if tick() - LSB < CD then
        Lib:CreateNotification("Cooldown Active", "Please wait before sending another report!", 3, {"OK"})
        return
    end
    LSB = tick()
    UpdateCD(CL, LSB)

    local BT = BR.Text or ""
    local desc = string.format(
        "**Bug Description:** %s\n**Player:** %s\n**Game:** [%s](%s)",
        BT ~= "" and BT or "No description provided",
        player.Name,
        GN,
        GU
    )

    local embed = {
        ["title"] = "New Bug Report",
        ["description"] = desc,
        ["color"] = 16711680
    }
    SendEmbed(BWH, embed)
    Lib:CreateNotification("Sent", "Your bug report has been sent!", 3, {"OK"})
end)

RS:CreateDropdown("Rating ", {1, 2, 3, 4, 5}, 5, function(value)
    SR = value
end)

local RRF, RR = RS:CreateTextBox("Write a Review", 100000, "Share your thoughts about the script...", nil)
RS:CreateButton("Send Review", function()
    if tick() - LSR < CD then
        Lib:CreateNotification("Cooldown Active", "Please wait before sending another review!", 3, {"OK"})
        return
    end
    LSR = tick()
    UpdateCD(CL, LSR)

    local RT = RR.Text or ""
    local stars = string.rep("⭐", SR) .. " (" .. SR .. "/5)"
    local desc = string.format(
        "**Review:** %s\n**Player:** %s\n**Game:** [%s](%s)\n**Rating:** %s",
        RT ~= "" and RT or "No review provided",
        player.Name,
        GN,
        GU,
        stars
    )

    local embed = {
        ["title"] = "New Script Review",
        ["description"] = desc,
        ["color"] = 255
    }
    SendEmbed(RWH, embed)
    Lib:CreateNotification("Sent", "Your review has been sent!", 3, {"OK"})
end)

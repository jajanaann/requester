local CoastingLibrary = getgenv().Lib
if not Lib then return end


local startTime = tick()
local FWH = "https://discord.com/api/webhooks/1349733453041631265/tSXnRN3U8WkRWvnZoOn-53cF8rXzlLJAymEFJcK4jY5G1X9BtaUJxFFbI6O4s-i4ZeUe"
local BWH = "https://discord.com/api/webhooks/1349733278059593798/cUN-FJMk0wuzRDjC-MsVe_pEu0AcDWzX9F8VD78Dhb_c5gifQtrQl89iRkgH_gZ50uHh"
local RWH = "https://discord.com/api/webhooks/1349733277619060737/F39PBma4eQSGKeeFXxiJ1ueM61IoGZIHU_CV7DIMBvl7aIK0Hl7bPhcoqWwFE6pctUuN"
local CD = 300
local LSF = 0
local LSB = 0
local LSR = 0
local SR = 5

local GN = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local GU = "https://www.roblox.com/games/" .. game.PlaceId

local MT = CoastingLibrary:CreateTab("Reporter")
local IS = MT:CreateSection("Player Info")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local WEBSITE_URL = "https://dashboard-userkey.vercel.app"

local request = (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request) or request


local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name or "Unknown Game"
local gameUrl = "https://www.roblox.com/games/" .. game.PlaceId


local lastBugReport = 0
local lastFeatureRequest = 0
local cooldownTime = 30 
local PIT = string.format(
    "Time Played: 0 seconds\nUsername: %s\nDisplay Name: %s\nPlayer ID: %d\nExecutor: %s\nJoin Date: %s\nMembership: %s",
    player.Name,
    player.DisplayName,
    player.UserId,
    (identifyexecutor and identifyexecutor() or "Unknown"),
    os.date("%Y-%m-%d", player.AccountAge * 86400 + os.time() - player.AccountAge * 86400),
    player.MembershipType == Enum.MembershipType.Premium and "Premium" or "None"
)
local PIL = IS:CreateLabel("Player Info", PIT)

spawn(function()
    while true do
        wait(1)
        local elapsed = tick() - startTime
        local updatedText = string.format(
            "Time Played: %d seconds (%.2f minutes)\nUsername: %s\nDisplay Name: %s\nPlayer ID: %d\nExecutor: %s\nJoin Date: %s\nMembership: %s",
            elapsed, elapsed / 60,
            player.Name,
            player.DisplayName,
            player.UserId,
            (identifyexecutor and identifyexecutor() or "Unknown"),
            os.date("%Y-%m-%d", player.AccountAge * 86400 + os.time() - player.AccountAge * 86400),
            player.MembershipType == Enum.MembershipType.Premium and "Premium" or "None"
        )
        PIL.ChangeText(updatedText)
    end
end)

function UpdateCD(label, lastSent)
    spawn(function()
        while tick() - lastSent < CD do
            local timeLeft = CD - (tick() - lastSent)
            label.ChangeText("Cooldown: " .. math.ceil(timeLeft) .. "s")
            wait(1)
        end
        label.ChangeText("")
    end)
end


local RS = MT:CreateSection("Requests, Reports & Reviews")
local CL = RS:CreateLabel("Cooldown", "")
RS:CreateLabel("Infor", "[ Beta ] New system.")
local function sendReport(reportType, title, description)
    local currentTime = tick()
    local lastTime = reportType == "bug" and lastBugReport or lastFeatureRequest
    
    if currentTime - lastTime < cooldownTime then
        Library:CreateNotification(
            "Cooldown Active", 
            "Please wait " .. math.ceil(cooldownTime - (currentTime - lastTime)) .. " seconds before sending another " .. reportType .. " report!", 
            3, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return false
    end
    
    
    if reportType == "bug" then
        lastBugReport = currentTime
    else
        lastFeatureRequest = currentTime
    end
    
    local data = {
        action = "submit",
        type = reportType,
        title = title,
        description = description,
        playerName = player.Name,
        playerId = tostring(player.UserId),
        gameName = gameName,
        gameUrl = gameUrl
    }
    
    local success, result = pcall(function()
        local response = request({
            Url = WEBSITE_URL .. "/api/reports",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(data)
        })
        return HttpService:JSONDecode(response.Body)
    end)
    
    if success and result and result.success then
        local ticketId = result.uniqueId or "Unknown"
        Library:CreateNotification(
            "Report Sent Successfully!", 
            "Your " .. reportType .. " report has been submitted!\nTicket ID: " .. ticketId .. "\nYou'll receive notifications when admins respond!", 
            8, 
            {"Awesome!", "Copy Ticket ID", "Delete me"}, 
            {
                function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end,
                function() 
                    setclipboard(WEBSITE_URL .. "/ticket?id=" .. ticketId)
                    game:GetService("CoreGui")["Rndm."].Notification:Destroy()
                end,
                function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end
            }
        )
        return true
    else
        local errorMsg = "Failed to send report"
        if result and result.error then
            errorMsg = result.error
        elseif not success then
            errorMsg = "Network error: " .. tostring(result)
        end
        
        Library:CreateNotification(
            "Error", 
            errorMsg, 
            5, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return false
    end
end
local bugReportFrame, bugReportTextBox = RS:CreateTextBox("Report a Bug", 100000, "Describe the bug here...", nil)
RS:CreateButton("Send Bug Report", function()
    local title = "Bug in " .. gameName
    local description = bugReportTextBox.Text or ""
    
    if description == "" or description == "Describe the bug here..." then
        Library:CreateNotification(
            "Error", 
            "Please provide a bug description!", 
            3, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return
    end
    
    if string.len(description) < 10 then
        Library:CreateNotification(
            "Error", 
            "Bug description must be at least 10 characters long!", 
            3, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return
    end
    
    sendReport("bug", title, description)
end)


local featureRequestFrame, featureRequestTextBox = RS:CreateTextBox("Request a Feature", 100000, "Describe your feature request here...", nil)
RS:CreateButton("Send Feature Request", function()
    local title = "Feature Request for " .. gameName
    local description = featureRequestTextBox.Text or ""
    
    if description == "" or description == "Describe your feature request here..." then
        Library:CreateNotification(
            "Error", 
            "Please provide a feature description!", 
            3, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return
    end
    
    if string.len(description) < 10 then
        Library:CreateNotification(
            "Error", 
            "Feature description must be at least 10 characters long!", 
            3, 
            {"OK"}, 
            {function() game:GetService("CoreGui")["Rndm."].Notification:Destroy() end}
        )
        return
    end
    
    sendReport("feature", title, description)
end)
function SendEmbed(wh, embed)
    local http = game:GetService("HttpService")
    local headers = { ["Content-Type"] = "application/json" }
    local data = { ["embeds"] = { embed } }
    local body = http:JSONEncode(data)
    pcall(function()
        request({
            Url = wh,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
end



RS:CreateDropdown("Rating ", {1, 2, 3, 4, 5}, 5, function(value)
    SR = value
end)

local RRF, RR = RS:CreateTextBox("Write a Review", 100000, "Share your thoughts about the script...", nil)
RS:CreateButton("Send Review", function()
    if tick() - LSR < CD then
        Lib:CreateNotification("Cooldown Active", "Please wait before sending another review!", 3, {"OK"})
        return
    end
    LSR = tick()
    UpdateCD(CL, LSR)

    local RT = RR.Text or ""
    local stars = string.rep("⭐", SR) .. " (" .. SR .. "/5)"
    local desc = string.format(
        "**Review:** %s\n**Player:** %s\n**Game:** [%s](%s)\n**Rating:** %s",
        RT ~= "" and RT or "No review provided",
        player.Name,
        GN,
        GU,
        stars
    )

    local embed = {
        ["title"] = "New Script Review",
        ["description"] = desc,
        ["color"] = 255
    }
    SendEmbed(RWH, embed)
    Lib:CreateNotification("Sent", "Your review has been sent!", 3, {"OK"})
end)
